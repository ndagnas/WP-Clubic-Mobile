//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : RestService.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet RestService
// Créé le       : 26/02/2015
// Modifié le    : 28/01/2016
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Web;
using System.Xml;
using System.Text;
using System.Windows;
using System.Xml.Linq;
using System.Threading;
using System.Globalization;
using System.Windows.Media;
using System.ComponentModel;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Net.NetworkInformation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Clubic.Service.Resources;
using Microsoft.Phone.Tasks;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "Clubic.Service"
//*******************************************************************************************************************************
namespace Clubic.Service
	{

	//  ####   #####   ####  #####          ###   #      #  #####  #   #  #####
	//  #   #  #      #        #           #   #  #      #  #      ##  #    #  
	//  ####   ###     ###     #    #####  #      #      #  ###    # # #    #  
	//  #   #  #          #    #           #   #  #      #  #      #  ##    #  
	//  #   #  #####  ####     #            ###   #####  #  #####  #   #    #  
	
	//***************************************************************************************************************************
	// Classe RestService
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet l'appel aux procédures du Service-Web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class RestService
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private const string UserAgent = "Clubic/122 CFNetwork/609.1.4 Darwin/13.0.0";
		private const string BaseUri   = "http://ws.m6web.fr/ws.php?idsite=1";
		private const string AppTitle  = "Clubic : Actualit&#233; informatique," +
		                                 " Comparatifs, Logiciels";
		//-----------------------------------------------------------------------------------------------------------------------
		private static List<string> ViewedArticles = null;
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		static RestService ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ViewedArticles = StorageSettings.GetValue ( "articles" ) as List<string>;

			if ( ViewedArticles == null ) ViewedArticles = new List<string> ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de l'Article.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ArticleToFile ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "ARTICLE-" + Article.ArticleID + ".HTML";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Extrait une méta-data.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ExtractMeta ( string Content, string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int MetaIndex = Content.IndexOf ( "<meta name=\"" + Name + "\"" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( MetaIndex > -1 )
				{
				//---------------------------------------------------------------------------------------------------------------
				int ContentIndex = Content.IndexOf ( "content=\"", MetaIndex );

				if ( ContentIndex > -1 )
					{
					int SIndex = ContentIndex + 9;
					int EIndex = Content.IndexOf ( "\"", SIndex );

					return Content.Substring ( SIndex, EIndex - SIndex );
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return InsertSheets ( Content, false );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content, bool HideViewedArticles )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) ) return string.Empty;

			int StylePosition = Content.IndexOf ( "[STYLE]" );
			int StyleSize     = 7;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( StylePosition > 0 && Content.Length > StylePosition + StyleSize )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Content.Substring ( StylePosition, StyleSize ).Equals ( "[STYLE]" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					string StyleSheetsContent = StyleSheets.Content;
					
					if ( HideViewedArticles ) StyleSheetsContent += ViewedArticlesToStyle ();

					return string.Format ( "{0}{1}{2}", Content.Substring ( 0, StylePosition ),
					         StyleSheetsContent, Content.Substring ( StylePosition + StyleSize ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Identifie un article comme lu.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void RegisterArticle ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! ViewedArticles.Contains ( Article.ArticleID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				ViewedArticles.Add ( Article.ArticleID );

				while ( ViewedArticles.Count > 50 ) ViewedArticles.RemoveAt ( 0 );

				StorageSettings.SetValue ( "articles", ViewedArticles );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToFile ( SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SECTION-" + Type.ToString ().ToUpper () + ".HTML";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToPart ( SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SECTION-" + Type.ToString ().ToUpper () + ".PART";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le style permettant le marquage des articles déjà lus.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ViewedArticlesToStyle ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Result = string.Empty;

			foreach ( string ViewedArticle in ViewedArticles )
				{ Result += ( ( string.IsNullOrEmpty ( Result ) ) ? "" : "," ) + 
				                                                       ( "#A_" + ViewedArticle ); }
			if ( ! string.IsNullOrEmpty ( Result ) )
				return string.Format ( SR.GetResource ( "GetArticlesList", "Cont.css" ), Result );

			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du 'GET'
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Délégate utilisé pour avertir de la réception des données
		//-----------------------------------------------------------------------------------------------------------------------
		private delegate void DownloadBitsCallback ( DownloadBitsState Args );
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Classe DownloadBitsState
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet le traitement d'une demande GET
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private class DownloadBitsState
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private object           AssociateObject;
			private AppCacheFile     CacheFile;
			private RestEventHandler OnComplete;
			private AsyncOperation   AsyncOperation;
			//-------------------------------------------------------------------------------------------------------------------
			
			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>DownloadBitsState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsState ( object               AssociateObject, 
			                           AppCacheFile         CacheFile      , 
			                           object               UserToken      , 
									   RestEventHandler     OnComplete     , 
									   DownloadBitsCallback Callback       )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AssociateObject = AssociateObject;
				this.CacheFile       = CacheFile;
				this.OnComplete      = OnComplete;
				this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.Callback       = Callback;
				this.Cookies        = new NameValueCollection ();
				this.Document       = null;
				this.Exception      = null;
				this.Stream         = null;
				this.StreamBuffer   = string.Empty;
				this.Request        = null;
				this.Response       = null;
				this.UserToken      = UserToken;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Envoi un rapport d'erreur.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			private void SendCrachLog ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				bool StreamReady = false;

				try { StreamReady = (this.Stream == null || ! this.Stream.CanRead); } catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.Exception == null && ! StreamReady && 
					                           string.IsNullOrEmpty ( this.StreamBuffer ) ) return;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					string Title    = Error.ToString ();
					string CrachLog = string.Empty;
					byte[] RawDatas = null;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					CrachLog += ( "Date: "              + DateTime.Now.ToString ( "yyyy-MM-dd HH:mm:ss" )   + "\n" );
					CrachLog += ( "OS-Version: "        + Environment.OSVersion.Version.ToString ()         + "\n" );
					CrachLog += ( "Network-Interface: " + NetworkInterface.NetworkInterfaceType.ToString () + "\n" );

					foreach ( var Item in IsolatedStorageSettings.ApplicationSettings )
						{ CrachLog += ( string.Format ( "{0}: {1}\n", Item.Key, Item.Value ) ); }

					CrachLog += "\n";
					//-----------------------------------------------------------------------------------------------------------
					
					//-----------------------------------------------------------------------------------------------------------
					if ( this.Request != null )
						{
						//-------------------------------------------------------------------------------------------------------
						CrachLog += "Request :\n\n";
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						try { CrachLog += string.Format ( "Accept: {0}\n"    , this.Request.Accept     ); } catch {}
						try { CrachLog += string.Format ( "RequestUri: {0}\n", this.Request.RequestUri ); } catch {}
						try { CrachLog += string.Format ( "UserAgent: {0}\n" , this.Request.UserAgent  ); } catch {}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						try { foreach ( string Item in this.Request.Headers )
								{ CrachLog += string.Format ( "\nHeader: {0} => {1}", Item, 
								                        this.Request.Headers[Item] ); } } catch {}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( this.Response != null )
						{
						//-------------------------------------------------------------------------------------------------------
						CrachLog += "Response :\n\n";
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						try { CrachLog += string.Format ( "Content-Length: {0}\n"    , 
						                              this.Response.ContentLength     ); } catch {}
						try { CrachLog += string.Format ( "Content-Type: {0}\n"      , 
						                              this.Response.ContentType       ); } catch {}
						try { CrachLog += string.Format ( "Method: {0}\n"            , 
						                              this.Response.Method            ); } catch {}
						try { CrachLog += string.Format ( "Response-Uri: {0}\n"      , 
						                              this.Response.ResponseUri       ); } catch {}
						try { CrachLog += string.Format ( "Status-Code: {0}\n"       , 
						                              this.Response.StatusCode        ); } catch {}
						try { CrachLog += string.Format ( "Status-Description: {0}\n", 
						                              this.Response.StatusDescription ); } catch {}
						try { CrachLog += string.Format ( "Supports-Headers: {0}\n"  , 
						                              this.Response.SupportsHeaders   ); } catch {}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						try { foreach ( string Item in this.Response.Headers )
								{ CrachLog += string.Format ( "\nHeader: {0} => {1}", Item, 
								                        this.Response.Headers[Item] ); } } catch {}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( this.Exception != null )
						CrachLog += ( "\n\n" + this.Exception.ToString () );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( StreamReady )
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							this.Stream.Position = 0;

							RawDatas = new Byte[this.Stream.Length];

							this.Stream.Read ( RawDatas, 0, (int)this.Stream.Length );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! string.IsNullOrEmpty ( this.StreamBuffer ) )
						{
						//-------------------------------------------------------------------------------------------------------
						RawDatas = Encoding.UTF8.GetBytes ( this.StreamBuffer );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					NameValueCollection QueryString = new NameValueCollection ();

					QueryString["AppName" ] = AppInfos.Name;
					QueryString["Title"   ] = Title;
					QueryString["CrachLog"] = CrachLog;
					
					if ( RawDatas != null )
						{
						QueryString["FileName"] = string.Format ( "{0}.bin", Title );
						QueryString["RawDatas"] = Convert.ToBase64String ( RawDatas );
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					SendOrPostCallback Event = ( object Args )=>
						{
						//-------------------------------------------------------------------------------------------------------
						NameValueCollection Data = (NameValueCollection)Args;

						var Uri = "http://api.on-va-sortir.com/SendCrachLog?App={0}";

						Uri = string.Format ( Uri, HttpUtility.UrlEncode ( AppInfos.Name ) );

						byte[] Content  = Encoding.UTF8.GetBytes ( Data.ToString () );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							HttpWebRequest http = (HttpWebRequest)HttpWebRequest.Create ( Uri );

							http.Method      = "POST";
							http.ContentType = "application/x-www-form-urlencoded";
							http.UserAgent   = DeviceInfos.UserAgent;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							http.BeginGetRequestStream ( ( IAsyncResult A ) =>
								{
								//-----------------------------------------------------------------------------------------------
								try
									{
									//-------------------------------------------------------------------------------------------
									HttpWebRequest Ra = (HttpWebRequest)A.AsyncState;

									using ( Stream Stream = Ra.EndGetRequestStream ( A ) )
										{ Stream.Write ( Content, 0, Content.Length ); }

									Ra.BeginGetResponse ( ( IAsyncResult B ) => {}, Ra );
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								catch {}
								//-----------------------------------------------------------------------------------------------
								}, http );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						};
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					AsyncOperationManager.CreateOperation ( null ).PostOperationCompleted ( Event, QueryString );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens la page web correspondante à l'anomalie.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			private string GetErrorContent ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string Content = SR.GetResource ( "Global", "404.html" );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( Error )
					{
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.EmptyResponse      : Content = 
						 string.Format ( Content, "EMPTY_RESPONSE"      , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InvalideFormat     : Content = 
						 string.Format ( Content, "INVALIDE_FORMAT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.PartialContent     : Content = 
						 string.Format ( Content, "PARTIAL_CONTENT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Forbidden          : Content = 
						 string.Format ( Content, "FORBIDDEN"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.NotFound           : Content = 
						 string.Format ( Content, "NOT_FOUND"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Timeout            : Content = 
						 string.Format ( Content, "TIMEOUT"             , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Unauthorized       : Content = 
						 string.Format ( Content, "UNAUTHORIZED_ACCESS" , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InternalException  : Content = 
						 string.Format ( Content, "INTERNAL_EXCEPTION"  , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ProxyAccessRequest : Content = 
						 string.Format ( Content, "PROXY_ACCESS_REQUEST", "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ServiceUnavailable : Content = 
						 string.Format ( Content, "SERVICE_UNAVAILABLE" , "none", "block" ); break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return InsertSheets ( Content );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( Uri ProxyAccessRequestUri )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.PostAnomaly ( RestRequestResult.ProxyAccessRequest );

				try
					{
					//-----------------------------------------------------------------------------------------------------------
					Instance.RootFrame.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							(new WebBrowserTask () { Uri = ProxyAccessRequestUri }).Show ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( this.CacheFile != null && ! this.CacheFile.IsEmpty )
							{
							//---------------------------------------------------------------------------------------------------
							string Content = InsertSheets ( CacheFile.Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							string Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.SendCrachLog ( Error );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error, string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! string.IsNullOrEmpty ( Content ) )
							{
							//---------------------------------------------------------------------------------------------------
							Content = InsertSheets ( Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.SendCrachLog ( Error );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostCallback ( SendOrPostCallback Callback )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );

					Callback ( null );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( this.AssociateObject, Content );

						this.OnComplete ( this.UserToken, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsCallback Callback { get; private set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public NameValueCollection Cookies { get; set; }
			//*******************************************************************************************************************
		
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public XElement Document { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public Exception Exception { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public Stream Stream { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public string StreamBuffer { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebRequest Request { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebResponse Response { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object UserToken { get; private set; }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Lance une requête de type GET
		/// </summary>
		/// <param name="Path">Chemin de la page à charger.</param>
		/// <param name="OnComplete">Est appelé à la fin du traitement.</param>
		/// <param name="Callback">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void DownloadBits ( object               AssociateObject,
		                                   string               Path           ,  
										   int                  TimeOut        ,
										   AppCacheFile         CacheFile      ,
		                                   object               UserToken      , 
		                                   RestEventHandler     OnComplete     , 
										   DownloadBitsCallback Callback       )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest Request = RestWebRequest.Create ();

			Request.UseCompression = RestService.UseCompression;

			Request.TimeOut = TimeOut;

			Request.Headers["User-Agent"] = UserAgent;

			Path = BaseUri + Path;

			var AsyncState = new DownloadBitsState ( AssociateObject, CacheFile, UserToken, 
			                                                                OnComplete, Callback );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsState State = Args.UserToken as DownloadBitsState;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Request   = Args.Request;
					State.Response  = Args.Response;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							State.Cookies = new NameValueCollection ( Request.Cookies );
							
							using ( StreamReader Tr = new StreamReader ( Args.Stream ) )
								{
								State.StreamBuffer = Tr.ReadToEnd ();

								State.StreamBuffer = State.StreamBuffer.Replace ( "\x5", "" ).
								                                        Replace ( "\x8", "" );

								State.Document = XElement.Parse ( State.StreamBuffer );
								}

							State.Callback ( State );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								//-----------------------------------------------------------------------------------------------
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.Unauthorized )
									{
									Result = RestRequestResult.Unauthorized;
									}
								else if ( Response.StatusCode == HttpStatusCode.Forbidden )
									{
									Result = RestRequestResult.Forbidden;
									}
								else if ( Response.StatusCode == HttpStatusCode.NotFound )
									{
									Result = RestRequestResult.NotFound;
									}
								else if ( Response.StatusCode == HttpStatusCode.RequestTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								else if ( Response.StatusCode == HttpStatusCode.GatewayTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ReceiveFailure )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.EmptyResponse;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ProtocolError )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.NotFound;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! string.IsNullOrEmpty ( Exception.Message ) )
								{
								//-----------------------------------------------------------------------------------------------
								if ( Exception.Message.IndexOf ( "NotFound" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.NotFound;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								else if ( Exception.Message.IndexOf ( "Timeout" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.Timeout;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						State.PostAnomaly ( Result );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Cancelled )
							State.PostAnomaly ( RestRequestResult.Timeout            );
						else
							State.PostAnomaly ( RestRequestResult.ServiceUnavailable );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.IsRedirected && Args.ResponseUri != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
							State.PostAnomaly ( Args.ResponseUri );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( XmlException Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						// Le contenue est vide
						//-------------------------------------------------------------------------------------------------------
						if ( string.IsNullOrEmpty ( State.StreamBuffer ) )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La taille de la réponse est de 0
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.Response               == null )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						else if ( Args.Response.ContentLength <=    0 )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La réponse est vide
						//-------------------------------------------------------------------------------------------------------
						else if ( State.StreamBuffer[0] == '\0' )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// On a été redirigé de force
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.ResponseUri != null )
							{
							//---------------------------------------------------------------------------------------------------
							if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
								State.PostAnomaly ( Args.ResponseUri );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( Exception Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;

					State.PostAnomaly ( RestRequestResult.InternalException );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), AsyncState );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetArticle
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetArticle</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static AppCacheFile ParseGetArticle ( Article Article, AppWebCache Cache, 
		                                                                  DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			XElement XItem = State.Document.Element ( "item" );

			if ( XItem == null ) return AppCacheFile.Empty;
			
			Article.Load ( XItem );

			if ( string.IsNullOrEmpty ( Article.Author ) ) Article.Author = "Clubic";
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticle", "Page.html" );
			string ItemHtml = SR.GetResource ( "GetArticle", "Item.html" );
			string ImagHtml = SR.GetResource ( "GetArticle", "Imag.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Content = string.Empty;

			Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Content += string.Format ( ItemHtml, "title" , Article.Title                         );
			Content += string.Format ( ItemHtml, "author", Article.Author                        );
			Content += string.Format ( ItemHtml, "date"  , Article.PublishDate.ToString 
			                                                           ( "dd-MM-yyyy HH:mm:ss" ) );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Détection du type d'Article
			//-------------------------------------------------------------------------------------------------------------------
			IEnumerable<XElement> XContentBlocks = new XElement[] { XItem };

			if ( XItem.Element ( "folder" ) != null )
				XContentBlocks = XItem.Element ( "folder" ).Elements ( "folderItem" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Extraction du ou des corps
			//-------------------------------------------------------------------------------------------------------------------
			foreach ( XElement XContentBlock in XContentBlocks )
				{
				//---------------------------------------------------------------------------------------------------------------
				// Images internes
				//---------------------------------------------------------------------------------------------------------------
				List<string> InnerImages = new List<string> ();

				XElement XInnerImagesSection = XContentBlock.Element ( "image" );

				if ( XInnerImagesSection != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					var XInnerImages = XInnerImagesSection.Elements ( "imageItem" );

					foreach ( XElement XInnerImage in XInnerImages )
						{ InnerImages.Add ( XInnerImage.Value.Trim () ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
			
				//---------------------------------------------------------------------------------------------------------------
				// Images externes
				//---------------------------------------------------------------------------------------------------------------
				List<string> OuterImages = new List<string> ();

				XElement XOuterImagesSection = XContentBlock.Element ( "original_image" );

				if ( XOuterImagesSection != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					var XOuterImages = XOuterImagesSection.Elements ( "original_imageItem" );

					foreach ( XElement XOuterImage in XOuterImages )
						{ OuterImages.Add ( XOuterImage.Value.Trim () ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string Details = XContentBlock.GetString ( "texte" );

				Details = Details.Replace ( "\n", "<br>\n" );

				int ObsoleteText = Details.IndexOf ( "<strong>A lire " );

				if ( ObsoleteText != -1 ) Details = Details.Substring ( 0, ObsoleteText );

				Details = string.Format ( ItemHtml, "paragraphe", Details );

				for ( int Id = 0 ; Id < Math.Min ( InnerImages.Count, OuterImages.Count ) ; Id ++ )
					{
					Details = Details.Replace ( string.Format ( "||{0}||", Id + 1 ), 
									string.Format ( ImagHtml, InnerImages[Id], OuterImages[Id] ) );
					}

				Content += Details;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string UrlEncode = Article.UrlEncode ( "ArticleID"  , 
											       "Icon"       , 
											       "IsFolder"   , 
												   "PublishDate", 
											       "SectionID"  , 
												   "Title"      , 
											       "Uri"        );

			Content = string.Format ( PageHtml, UrlEncode, Article.Title, Content );

			Article.Content = Content;

			return Cache.Save ( ArticleToFile ( Article ), Article.PublishDate, Content );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void AsyncGetArticle ( RestEventHandler OnComplete, bool AllowCache, 
		                                                  Article Article, AppCacheFile CacheFile )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// L'article est il enregistré ?
			//-------------------------------------------------------------------------------------------------------------------
			Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );

			if ( Article.IsMarked && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Bookmarks = AppBookmarks.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article Bookmark = Bookmarks.Get<Article> ( Article.ArticleID );

					if ( Bookmark != null && ! string.IsNullOrEmpty ( Bookmark.Content ) )
						{
						Article.CopyFrom ( Bookmark );

						OnComplete ( null, new RestEventArgs ( Article, InsertSheets 
						                                                  ( Bookmark.Content ) ) );
						return;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			string Path = string.Empty;

			if ( Article.IsFolder )
				Path = "&wsn=getListFolder&wst=content&type=detail&idfolder={0}&dim=308-";
			else
				Path = "&wst=content&wsn=getListNews&type=detail&idnews={0}&dim=308-";

			Path = string.Format ( Path, Article.ArticleID );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Exécution
			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Article, Path, 20, CacheFile, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					AppCacheFile NewEntry = ParseGetArticle ( Article, Cache, State );

					if ( NewEntry.IsEmpty )
						{
						State.PostAnomaly ( RestRequestResult.NotFound );
						}
					else
						{
						RegisterArticle ( Article );

						State.PostOperationComplete ( InsertSheets ( NewEntry.Content, false ) );
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticle ( RestEventHandler OnComplete, bool AllowCache, 
		                                                                          Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = Article.PublishDate;
			string       FileName   = ArticleToFile ( Article );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( FileName, ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article.Load ( ExtractMeta ( Entry.Content, "article" ) );

				Article.Content  = Entry.Content;
				Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				RegisterArticle ( Article );

				OnComplete ( null, new RestEventArgs ( Article, InsertSheets ( Entry.Content ) ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetArticle ( OnComplete, AllowCache, Article, Entry ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetBookmarks
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetBookmarks ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );

			string   Content     = string.Empty;
			DateTime CurrentDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			using ( var Bookmarks = AppBookmarks.GetForApplication () )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Items = Bookmarks.GetEnumerator<Article> ();
				
				foreach ( var Item in Items.Keys )
					{
					//-----------------------------------------------------------------------------------------------------------
					DateTime BookmarkDate = Items[Item];
					//-----------------------------------------------------------------------------------------------------------
					
					//-----------------------------------------------------------------------------------------------------------
					// Séparateur
					//-----------------------------------------------------------------------------------------------------------
					if ( CurrentDate.Date != BookmarkDate.Date )
						{
						//-------------------------------------------------------------------------------------------------------
						CurrentDate = BookmarkDate.Date;

						Content += string.Format ( DateHtml, WebUtility.HtmlEncode ( 
									    CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else { Content += SepaHtml; }
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					string LongArticleUri  = Item.UrlEncode ( "ArticleID"  , 
															  "Icon"       , 
															  "IsFolder"   , 
															  "PublishDate", 
															  "SectionID"  , 
															  "Title"      , 
															  "Uri"        );
					string ShortArticleUri = Item.UrlEncode ( "ArticleID"  , 
															  "PublishDate",
															  "Icon"       ,
											                  "IsFolder"   , 
															  "Uri"        );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Content += string.Format ( ItemHtml                                       , 
											   LongArticleUri                                 , 
											   ShortArticleUri                                , 
											   Item.Icon                                      , 
											   Item.ArticleID                                 , 
											   BookmarkDate.ToString ( "dd-MM-yyyy HH:mm:ss" ),
											   Item.Title                                     ,
											   string.Empty                                   );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = InsertSheets ( SR.GetResource ( "GetArticlesList", "404.html" ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = InsertSheets ( string.Format ( PageHtml, AppTitle, Content, 
				                                                                  string.Empty ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GLOBAL => Procédure ExtractArticles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>ExtractArticles</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ParseArticles ( SectionType Type, DownloadBitsState State, 
		                                                                 ref DateTime CurrentDate )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Content = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			IEnumerable<XElement> XItems = State.Document.Elements ( "item" );

			foreach ( XElement XItem in XItems )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Item = Article.Parse ( XItem );

				Item.IsFolder = ( Type == SectionType.Folders );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( CurrentDate.Date != Item.PublishDate.Date )
					{
					if ( Type == SectionType.All && CurrentDate == DateTime.MinValue )
						{
						CurrentDate = Item.PublishDate.Date;

						Content += string.Format ( DateHtml, "Les Derniers Articles" );
						}
					else
						{
						CurrentDate = Item.PublishDate.Date;

						Content += string.Format ( DateHtml, WebUtility.HtmlEncode ( 
						                CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						}
					}
				else { Content += SepaHtml; }
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string LongArticleUri  = Item.UrlEncode ( "ArticleID"  , 
														  "Icon"       , 
														  "IsFolder"   , 
														  "PublishDate", 
														  "SectionID"  , 
														  "Title"      );
				string ShortArticleUri = Item.UrlEncode ( "ArticleID"  , 
														  "PublishDate",
											              "IsFolder"   , 
														  "Icon"       );

				Content += string.Format ( ItemHtml                                           , 
										   LongArticleUri                                     , 
										   ShortArticleUri                                    , 
										   Item.Icon                                          , 
										   Item.ArticleID                                     , 
										   Item.PublishDate.ToString ( "dd-MM-yyyy HH:mm:ss" ),
										   Item.Title                                         ,
										   Item.Description                                   );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetArticlesList
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void ParseGetArticlesList ( SectionType Type, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DateTime LastPublishDate = DateTime.MinValue;
			
			string Content = ParseArticles ( Type, State, ref LastPublishDate );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Tout est ok et récent
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
					string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Cache.Save ( SectionToPart ( Type ), Content );

					if ( Type == SectionType.Folders )
						PrevHtml = string.Format ( PrevHtml, "DOSSIERS" );
					else
						PrevHtml = string.Format ( PrevHtml, "ARTICLES" );

					Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

					AppCacheFile NewEntry = Cache.Save ( SectionToFile ( Type ), Content );

					State.PostOperationComplete ( InsertSheets ( Content, true ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a rien à afficher :(
			//-------------------------------------------------------------------------------------------------------------------
			else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetArticlesList</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticlesList ( RestEventHandler OnComplete, bool AllowCache,
		                                                                         SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -15 );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( SectionToFile ( Type ), ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = InsertSheets ( Entry.Content, true );

				OnComplete ( null, new RestEventArgs ( Type, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				// Initialisation
				//---------------------------------------------------------------------------------------------------------------
				string Path = "&wsn=getListNews&wst=content&type=liste&dim=82-82";

				switch ( Type )
					{
					//-----------------------------------------------------------------------------------------------------------
					case SectionType.Folders    : Path  = "&wsn=getListFolder" +
					                                      "&wst=content"       +
					                                      "&type=liste"        +
					                                      "&order=when"        +
					                                      "&dim=82-82";  break;
					//-----------------------------------------------------------------------------------------------------------
					case SectionType.Hardware   : Path += "&idcat=1284"; break;
					case SectionType.Internet   : Path += "&idcat=80";   break;
					case SectionType.Mac        : Path += "&idcat=2360"; break;
					case SectionType.Mobility   : Path += "&idcat=2086"; break;
					case SectionType.Multimedia : Path += "&idcat=2068"; break;
					case SectionType.Network    : Path += "&idcat=424";  break;
					case SectionType.Pro        : Path += "&idcat=2346"; break;
					case SectionType.Relaxation : Path += "&idcat=2836"; break;
					case SectionType.Security   : Path += "&idcat=426";  break;
					case SectionType.Software   : Path += "&idcat=2164"; break;
					case SectionType.Technology : Path += "&idcat=1696"; break;
					case SectionType.Tv         : Path += "&idcat=2358"; break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Exécution
				//---------------------------------------------------------------------------------------------------------------
				DownloadBits ( Type, Path, 20, Entry, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					ParseGetArticlesList ( Type, State );
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetPreviousArticlesList
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetPreviousArticlesList ( SectionType Type,
		                                                              RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry = AppCacheFile.Empty;

			DateTime LastPublishDate = DateTime.Now.AddHours ( -4 );

			if ( AppWebCache.Find ( SectionToPart ( Type ), DateTime.MinValue, out Entry ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( StringReader Sr = new StringReader ( Entry.Content ) )
					{
					string Line = string.Empty;

					while ( ( Line = Sr.ReadLine () ) != null )
						{
						if ( Line.StartsWith ( "<!--" ) )
							{
							var Item = Article.Parse ( Line.Substring ( 4, Line.Length - 7 ).
							                                                             Trim () );
							if ( ! Item.IsEmpty ) LastPublishDate = Item.PublishDate;
							}
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = "&wsn=getListNews&wst=content&type=liste&dim=82-82&date={0}&ord=inf";

			switch ( Type )
				{
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.Folders    : Path  = "&wsn=getListFolder" +
					                                  "&wst=content"       +
					                                  "&type=liste"        +
					                                  "&order=when"        +
					                                  "&dim=82-82";  break;
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.Hardware   : Path += "&idcat=1284"; break;
				case SectionType.Internet   : Path += "&idcat=80";   break;
				case SectionType.Mac        : Path += "&idcat=2360"; break;
				case SectionType.Mobility   : Path += "&idcat=2086"; break;
				case SectionType.Multimedia : Path += "&idcat=2068"; break;
				case SectionType.Network    : Path += "&idcat=424";  break;
				case SectionType.Pro        : Path += "&idcat=2346"; break;
				case SectionType.Relaxation : Path += "&idcat=2836"; break;
				case SectionType.Security   : Path += "&idcat=426";  break;
				case SectionType.Software   : Path += "&idcat=2164"; break;
				case SectionType.Technology : Path += "&idcat=1696"; break;
				case SectionType.Tv         : Path += "&idcat=2358"; break;
				//---------------------------------------------------------------------------------------------------------------
				}

			string PublishDate = LastPublishDate.ToString ( "yyyy-MM-dd HH:mm:ss" );

			PublishDate = PublishDate.Replace ( " ", "%20" );
			PublishDate = PublishDate.Replace ( ":", "%3A" );

			Path = string.Format ( Path, PublishDate );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Type, Path, 20, AppCacheFile.Empty, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				string AddedContent = ParseArticles ( Type, State, ref LastPublishDate );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( AddedContent ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var Cache = AppWebCache.GetForApplication () )
						{
						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la partie PART
						//-------------------------------------------------------------------------------------------------------
						string Content = Entry.Content + AddedContent;

						Cache.Save ( SectionToPart ( Type ), Content );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la page complète
						//-------------------------------------------------------------------------------------------------------
						string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
						string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( Type == SectionType.Folders )
							PrevHtml = string.Format ( PrevHtml, "DOSSIERS" );
						else
							PrevHtml = string.Format ( PrevHtml, "ARTICLES" );

						Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

						Cache.Save ( SectionToFile ( Type ), Content );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( AddedContent );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> UseCompression
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique s'il faut compresser les échanges.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool UseCompression
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "use-compression", true  ); }
			set {        StorageSettings.SetValue ( "use-compression", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "Clubic.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
